service cloud.firestore {   
  match /databases/{database}/documents {     
    match /posts/{docId} {      
      allow read: if request.auth.uid != null     
    }   
  }
}

service cloud.firestore {    
  match /databases/{database}/documents {      
    match /users/{uid} {        
      allow read, write: if request.auth.uid == uid      
    }    
  }  
} 


service cloud.firestore {    
  match /databases/{database}/documents {      
    match /users/{uid}/ {        
      allow read, write: 
        if request.auth.uid == uid &&
           request.auth.token.email_verified == true     
    }    
  }  
} 


service cloud.firestore {   
  match /databases/{database}/documents {     
    match /posts/{docId} {      
      allow create: 
        if request.resource.data.title is string && 
           request.data.title.size() > 5 &&
           request.data.title.size() < 500 &&
           request.resource.data.author_id == request.auth.uid     
     }   
  } 
}


match /posts/{docId} {    
  allow read, update: 
    if resource.data.author_id == request.auth.uid
 }
 
 
 match /posts/{docId} {   
  allow read, write: if request.auth.token.isAdmin 
}  


match /posts/{docId} {      
  allow create: 
    if request.resource.data.title is string &&
       request.resource.data.title.size() > 5 &&        
       request.resource.data.title.size() < 500 &&
       request.resource.data.author_id == request.auth.uid
   allow read, update: if request.auth.uid == resource.data.author_id || 
       request.auth.token.isAdmin 
}


match /posts/{docId} {    
  allow read, write: if get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role["isAdmin"] 
}     

match /posts/{docId} {    
    allow read, write: if hasRole("isAdmin")  
}      

function hasRole(userRole) {    
  return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role[userRole] 
}